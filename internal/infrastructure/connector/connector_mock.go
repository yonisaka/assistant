// Code generated by MockGen. DO NOT EDIT.
// Source: connector.go
//
// Generated by this command:
//
//	mockgen -destination connector_mock.go -package connector -mock_names Connector=GoMockConnector -source connector.go
//

// Package connector is a generated GoMock package.
package connector

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// GoMockConnector is a mock of Connector interface.
type GoMockConnector struct {
	ctrl     *gomock.Controller
	recorder *GoMockConnectorMockRecorder
}

// GoMockConnectorMockRecorder is the mock recorder for GoMockConnector.
type GoMockConnectorMockRecorder struct {
	mock *GoMockConnector
}

// NewGoMockConnector creates a new mock instance.
func NewGoMockConnector(ctrl *gomock.Controller) *GoMockConnector {
	mock := &GoMockConnector{ctrl: ctrl}
	mock.recorder = &GoMockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockConnector) EXPECT() *GoMockConnectorMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *GoMockConnector) Send(ctx context.Context, requestOption *RequestOption, response any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, requestOption, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *GoMockConnectorMockRecorder) Send(ctx, requestOption, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*GoMockConnector)(nil).Send), ctx, requestOption, response)
}
